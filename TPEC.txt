void insertionSort(int ar_size, int * ar) { 
int j = ar_size-1;
int v = ar[j];
while(v < ar[j-1]) {
ar[j] = ar[j-1];
j--;
print(ar_size, ar);
}
ar[j]=v;
print(ar_size, ar);
}

---------------------------------------------

void insertionSort(int ar_size, int * ar) {
for (int i = 1; i < ar_size; ++i) {
int j = i - 1;
int p = ar[i];
while (j >= 0 && p < ar[j]) {
ar[j+1] = ar[j];
j--;
}
ar[j+1] = p;
printf("%d", ar[0]);
for (int k = 1; k < ar_size; ++k){
printf(" %d", ar[k]);
}
printf("\n");
}
}

-------------------------------------------

void insertionSort(int ar_size, int * ar) {
int i,j;
int value;
for(i=1;i<ar_size;i++){
value=ar[i];
j=i-1;
while(j>=0 && value<ar[j]){
ar[j+1]=ar[j];
j=j-1;
}
ar[j+1]=value;
}
for(j=0;j<ar_size;j++){
printf("%d",ar[j]);
printf(" ");
}
} 

------------------------------------------------------------

void insertionSort(int ar_size, int * ar,int *shifts) {
int temp=ar[ar_size-1],i;
for(i=ar_size-2;i>=0;i--){
if(ar[i]>temp){
ar[i+1]=ar[i];
*shifts=*shifts+1;
}
else 
break;
}
ar[i+1]=temp;
}

-----------------------------------------------------------

int main() {
int n,i;
int b[100],a;
scanf("%d",&n);
for(i=0;i<100;i++){
b[i]=0;
}
for(i=0;i<n;i++){
scanf("%d",&a);
b[a]++;
}
for(i=0;i<100;i++){
printf("%d ", b[i]);
}
return 0;
}

-----------------------------------------------------------

int the_power_sum(int n, int m,int p){
int tmp = pow(m,p);
if(tmp == n) return 1;
if(tmp > n) return 0;
return the_power_sum(n,m+1,p) + the_power_sum(n-tmp, m+1,p);
}

-------------------------------------------------------------

int t,i,win;
long unsigned int n; 
scanf("%d",&t);
for(i=0;i<t;++i){
win=0;
scanf("%lu",&n);
if(n==1)
printf("Richard\n");
else{
while(n!=1){
if(isPow2(n))
n>>=1;
else
n-=largePow(n);
++win;
}
}
if(win%2==0)
printf("Richard\n");
else
printf("Louise\n");
}
return 0;
}
int isPow2(long unsigned int n){
return !(n&(n-1));
}

-----------------------------------------

if(j) {
X = L - 1 + ML;
Y = R - 1 + MR;
P = abs(L - B) + ML;
Q = abs(R - B) + MR;
ML = (X>Y ?X:Y);
MR = (P > Q? P:Q);
} else {
ML =MR= 0;
}

-------------------------------------------------

quickSort(a,0,n-1);
int min=a[1]-a[0];
for(i=2;i<n;i++)
if(a[i]-a[i-1]<min) min=a[i]-a[i-1];
for(i=1;i<n;i++)
if(a[i]-a[i-1]==min) printf("%d %d ",a[i-1],a[i]);
printf("\n");
return 0;
}

--------------------------------------------------

for( ; t>0 ; t--)
{
scanf("%d%d",&c,&l);
for(i=0;i<l;i++)
scanf("%d",&arr[i]);
for(i=0;i<l-1;i++)
for(j=i+1;j<l;j++)
{
if(arr[i]+arr[j]==c)
printf("%d %d\n",i+1,j+1);
}
}
return 0;
}

-----------------------------------------------

int maxXor(int l, int r) {
int max = 0,i,j;
for(i=l;i<r;i++)
for(j=i+1;j<=r;j++)
max = max<(i^j)?i^j:max;
return max;
}

----------------------------------------------

while(n>0){
if(n%2==0)m*=2;
n/=2;
}
printf("%lld\n",m);
return 0;
}

----------------------------------------------

int main() {
int t;
unsigned int n;
scanf("%d", &t);
while(t-- > 0) {
scanf("%u", &n);
printf("%u\n", ~n);
}
return 0;
}
